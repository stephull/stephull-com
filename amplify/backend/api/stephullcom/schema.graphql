type Comment @model @auth(rules: [{allow: public}]) {
  id: ID!
  comment: String!
  stars: Int
  poster: String
  blogtimelineitemID: ID @index(name: "byBlogTimelineItem")
  mediatimelineitemID: ID @index(name: "byMediaTimelineItem")
}

type BlogTimelineItem @model @auth(rules: [{allow: public}]) {
  id: ID!
  createdAt: AWSDateTime!
  stars: Int
  blogcomments: [Comment] @hasMany(indexName: "byBlogTimelineItem", fields: ["id"])
  blogcontents: [Content] @hasMany(indexName: "byBlogTimelineItem", fields: ["id"])
  blogsource: Blog @hasOne
}

type MediaTimelineItem @model @auth(rules: [{allow: public}]) {
  id: ID!
  description: String
  createdAt: AWSDateTime!
  stars: Int
  mediacomments: [Comment] @hasMany(indexName: "byMediaTimelineItem", fields: ["id"])
  mediacontents: [Content] @hasMany(indexName: "byMediaTimelineItem", fields: ["id"])
}

enum ContentType {
  IMAGE
  VIDEO
}

type Content @model @auth(rules: [{allow: public}]) {
  id: ID!
  type: ContentType!
  source: String!
  title: String
  mediatimelineitemID: ID @index(name: "byMediaTimelineItem")
  blogtimelineitemID: ID @index(name: "byBlogTimelineItem")
}

type Blog @model @auth(rules: [{allow: public}]) {
  id: ID!
  title: String!
  paragraphs: [String!]
  externallinks: [AWSURL]
}
 
type Mutation {
  createFormContact(input: ContactFormInput!): ContactFormResult
}

input ContactFormInput {
  firstName: String!
  lastName: String!
  emailAddress: String!
  howYouFound: String!
  inquiry: String!
}

type ContactFormResult {
  id: ID!
  success: Boolean!
  message: String
}